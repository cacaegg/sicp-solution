(define (make-machine register-names ops controller-text)
  (let ((machine (make-new-machine)))
    (for-each (lambda (register-name)
		((machine 'allocate-register) register-name))
	      register-names)
    ((machine 'install-operations) ops)
    ((machine 'install-instruction-sequence)
     (assemble controller-text machine))))

;;; Register implementation and operation interface
(define (make-register name)
  (let ((contents '*unassigned*))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
	    ((eq? message 'set)
	     (lambda (value) (set! content value)))
	    (else
	     (error 'register "Unknown request" message))))
    dispatch))
(define (get-content register)
  (register 'get))
(define (set-contents! register val)
  ((register 'set) val))

;;; Stack implementation and operation interface
(define (make-stack)
  (let ((s '()))
    (define (push x)
      (set! s (cons x s)))
    (define (pop)
      (if (null? s)
	  (error 'pop "Empty stack")
	  (let ((top (car s)))
	    (set! s (cdr s))
	    top)))
    (define (initialize)
      (set! s '()))
    (define (displatch msg)
      (cond ((eq? msg 'push) push)
	    ((eq? msg 'pop) (pop))
	    ((eq? msg 'initialize) (initialize))
	    (else
	     (error 'stack "Unknown request" msg))))
    dispatch))
(define (pop stack) (stack 'pop))
(define (push stack val)
  ((stack 'push) val))

(define (start machine)
  (machine 'start))
(define (get-register-contents machine register-name)
  (get-contents (get-register machine register-name)))
(define (set-register-contents! machine register-name value)
  (set-contents! (get-register machine register-name) value))
(define (get-register machine register-name)
  ((machine 'get-register) register-name))

(define (make-new-machine)
  (let ((pc (make-register 'pc))
	(flag (make-register 'flag))
	(stack (make-stack))
	(the-instruction-sequence '()))
    (let ((the-ops
	   (list (list 'initialize-stack
		       (lambda () (stack 'initialize)))))
	  (register-table
	   (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
	(if (assoc name register-table)
	    (error 'allocate-register "Duplicated register name" name)
	    (set! register-table
		  (cons (list name (make-register name))
			register-table)))
	'register-allocated)
      (define (lookup-register name)
	(let ((val (assoc name register-table)))
	  (if val
	      (cadr val)
	      (error 'lookup-register "Unknown register" name))))
      (define (execute)
	(let ((insts (get-contents pc)))
	  (if (null? insts)
	      'done
	      (begin
		((instruction-execution-proc (car insts)))
		(execute)))))
      (define (dispatch msg)
	(cond ((eq? msg 'start)
	       (set-contents! pc the-instruction-sequence))
	      ((eq? msg 'install-instruction-sequence)
	       (lambda (seq) (set! the-instruction-sequence seq)))
	      ((eq? msg 'allocate-register) allocate-register)
	      ((eq? msg 'get-register) lookup-register)
	      ((eq? msg 'install-operations)
	       (lambda (ops) (set! the-ops (append the-ops ops))))
	      ((eq? msg 'stack) stack)
	      ((eq? msg 'operation) the-ops)
	      (else (error 'machine "Unknown request" msg))))
      dispatch)))
