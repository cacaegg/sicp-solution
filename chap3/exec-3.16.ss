(define (count-pairs x)
 (if (not (pair? x))
     0
     (+ (count-pairs (car x))
        (count-pairs (cdr x))
        1)))

; This procedure will incorrect count 
; due to it doesn't check if the pair is eq?
;
; x
; (count-pairs x) -> 3
; Wrong, in fact, it's 2.
; |---|---|
; | | | ----------------------------------------
; |_|_|___|                                    |
;   \_______________________________________   |
;                                          |   |
;                                          v   v
; |---|---|    |---|---|    |---|---|    |---|---|
; |   | ------>|   | ------>|   | ------>|   | X |
; |___|___|    |___|___|    |___|___|    |___|___|
;                                           
;
; x
; (count-pairs x) -> 4
; In fact, it's 3.
; |---|---|
; | | | ----------------------------------------
; |_|_|___|                                    |
;   \__________________________                |
;                             |                |
;                             v                v
; |---|---|    |---|---|    |---|---|    |---|---|
; |   | ------>|   | ------>|   | ------>|   | X |
; |___|___|    |___|___|    |___|___|    |___|___|
;
;
; x
; (count-pairs x) -> 7
; In fact, it's 5.
; |---|---|
; | | | -----------------------                 
; |_|_|___|                   |                 
;   |                         |                 
;   |                         |                 
;   v                         v                 
; |---|---|    |---|---|    |---|---|    |---|---|
; |   | ------>|   | ------>|   | ------>|   | X |
; |___|___|    |___|___|    |___|___|    |___|___|
;
;
; (count-pairs x) never return
;   __________
;   |        |
;   v        |
; |---|---|  |
; | | | -----|
; |_|_|___|
;   |
;   v
;   A
(define x (cons 'A 'B))
(set-cdr! x x)
(count-pairs x)
