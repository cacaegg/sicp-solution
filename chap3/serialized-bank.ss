(import (chezscheme))
(define (make-account-and-serializer balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            ((eq? m 'balance) balance)
            ((eq? m 'serializer) balance-serializer)
            (else (error 'make-account "Unknown request" m))))
    dispatch))

(define (deposit account amount)
  (let ((s (account 'serializer))
        (d (account 'deposit)))
    ((s d) amount)))
(define (withdraw account amount)
  (let ((s (account 'serializer))
        (w (account 'withdraw)))
    ((s w) amount)))
(define (exchange account1 account2)
  (let ((difference (- (account1 'balance)
                       (account2 'balance))))
    ((account1 'withdraw) difference)
    ((account2 'deposit) difference)))
(define (serialized-exchange account1 account2)
  (let ((serializer1 (account 'serializer))
        (serializer2 (account 'serializer)))
    ((serializer1 (serializer2 exchange))
     account1
     account2)))
(define (make-mutex)
  (let ((cell (list #f)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
    the-mutex))
(define (make-serializer)
  (let ((mutex (make-mutex)))
    (lambda (p)
      (define (serialized-p . args)
        (mutex 'acquire)
        (let ((val (apply p args)))
          (mutex 'release)
          val))
      serialized-p)))
(define (clear! cell)
  (set-car! cell #f))
(define (test-and-set! cell)
  (critical-section
    (if (car cell)
        #t
        (begin (set-car! cell #t)
               #f))))
(define account (make-account-and-serializer 100))
(define paul (lambda () 
               (withdraw account 10)
               (deposit account 30)
               'paul))
(define peter (lambda () 
                (withdraw account 50)
                (deposit account 20)
                'peter))
;(paul)
;
(fork-thread peter)
(account 'balance)
(fork-thread paul)
(sleep (make-time 'time-duration 10 1))
(account 'balance)
