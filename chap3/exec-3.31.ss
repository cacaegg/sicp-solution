(define (make-wire)
 (let ((signal-value 0) (action-procedures '()))
  (define (set-my-signal! new-value)
   (if (not (= signal-value new-value))
       (begin (set! signal-value new-value)
              (call-each action-procedures))
       'done))
  ; We need to do (proc) for initialization, or there will be no output
  ; if wire didn't change their input initial signal value from 0 to 1
  (define (accept-action-procedure! proc)
   (set! action-procedures (cons proc action-procedures))
   (proc)) 
  (define (dispatch m)
   (cond ((eq? m 'get-signal) signal-value)
         ((eq? m 'set-signal!) set-my-signal)
         ((eq? m 'add-action!) accept-action-procedure!)
         (else (error 'make-wire "Unknown operation -- WIRE" m))))
  dispatch))
(define (logical-not s)
 (cond ((= s 0) 1)
       ((= s 1) 0)
       (else (error 'logical-not "Invalid signal" s))))
(define (logical-and s1 s2)
 (cond ((and (= 1 s1) (= 1 s2)) 1)
       ((and (= 1 s1) (= 0 s2)) 0)
       ((and (= 0 s1) (= 1 s2)) 0)
       ((and (= 0 s1) (= 0 s2)) 0)
       (else (error 'logical-and "Invalid signal" s1 s2))))
(define (inverter input output)
 (define (invert-input)
  (let ((new-value (logical-not (get-signal input))))
   (after-delay inverter-delay
                (lambda ()
                 (set-signal! output new-value)))))
 (add-action! input invert-input)
 'ok)
(define (ang-gate a1 a2 output)
 (define (and-action-procedure)
  (let ((new-value (logical-and (get-signal a1) (get-signal a2))))
   (after-delay and-gate-delay
    (lambda ()
     (set-signal! output new-value)))))
 (add-action! a1 and-action-procedure)
 (add-action! a2 and-action-procedure)
 'ok)
(define (or-gate a1 a2 output)
 (define (or-action-procedure)
  (let ((new-value
         (logical-or (get-signal a1) (get-signal a2))))
   (after-delay or-gate-delay
                (lambda ()
                 (set-signal! output new-value)))))
 (add-action! a1 or-action-procedure)
 (add-action! a2 or-action-procedure)
 'ok)
(define (half-adder a b s c)
 (let ((d (make-wire)) (e (make-wire)))
  (or-gate a b d)
  (and-gate a b c)
  (iverter c e)
  (and-gate d e s)
  'ok))
(define (full-adder a b c-in sum c-out)
 (let ((s (make-wire))
       (c1 (make-wire))
       (c2 (make-wire)))
  (half-adder b c-in s c1)
  (half-adder a s sum c2)
  (or-gate c1 c2 c-out)
  'ok))

(define (ripple-carry-adder an bn c-out sn)
 (define (add-iter an bn c-in sn)
  (if (null? (cdr an))
      (begin
       (full-adder (car an) (car bn) c-in (car s) c-out)
       'ok)
      (begin
       (make-wire carry-ab)
       (full-adder (car an) (car bn) c-in (car s) carry-ab)
       (add-iter (cdr an) (cdr bn) carry-ab) (cdr sn))))
 (add-iter an bn 0 sn c-out))

; 2 and-gate, 2 or-gate, and 1 inverter time delay per full-adder
; n-bit ripple-carry adder's delay will be time of 2*n and-gate, 2*n or-gate, n inverter 
