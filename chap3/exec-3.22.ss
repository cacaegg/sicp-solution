(define (make-queue)
 (let ((front '())
       (rear '()))
  (define (set-front-ptr! item) (set! front item))
  (define (set-rear-ptr! item) (set! rear item))
  (define (empty-queue?) (null? front))
  (define (front-queue)
   (if (empty-queue?)
       (error 'front-queue "ERROR called with an empty queue" queue)
       (car front)))
  (define (insert-queue! item)
   (let ((new-pair (cons item '())))
    (cond ((empty-queue?)
           (set-front-ptr! new-pair)
           (set-rear-ptr! new-pair))
          (else
           (set-cdr! rear new-pair)
           (set-rear-ptr! new-pair)))))
  (define (delete-queue!)
   (cond ((empty-queue?)
          (error 'delete-queue "ERROR called with an empty queue" queue))
         (else
          (set-front-ptr! (cdr front)))))
  (define (print-queue)
   (if (empty-queue?)
       (begin (display '())(newline))
       (begin (display front)(newline))))
  (define (dispatch m)
   (cond ((eq? m 'front) front-queue)
         ((eq? m 'insert!) insert-queue!)
         ((eq? m 'delete!) delete-queue!)
         ((eq? m 'print) print-queue)
         (else 
          (error 'dispatch "ERROR no such operation in queue" m))))
  dispatch))
(define (q-insert! q item) ((q 'insert!) item))
(define (q-delete! q) ((q 'delete!)))
(define (q-front q) ((q 'front)))
(define (q-print q) ((q 'print)))

(define q1 (make-queue)) 
(q-print q1)
(q-insert! q1 1)
(q-insert! q1 'a)
(q-print q1)
(q-front q1)
(q-delete! q1)
(q-print q1)
