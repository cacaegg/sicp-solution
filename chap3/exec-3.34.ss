(define (adder a-1 a-2 sum-)
 (let ((a1 a-1) (a2 a-2) (sum sum-))
  (define (process-new-value)
   (cond ((and (has-value? a1) (has-value? a2))
          (set-value! sum
                      (+ (get-value a1) (get-value a2))
                      me))
         ((and (has-value? a1) (has-value? sum))
          (set-value! a2
                      (- (get-value sum) (get-value s1))
                      me))
         ((and (has-value? a2) (has-value? sum))
          (set-value! a1
                      (- (get-value sum) (get-value a2))
                      me))))
  (define (process-forget-value)
   (forget-value! sum me)
   (forget-value! a1 me)
   (forget-value! a2 me)
   (process-new-value))
  (define (me request)
   (cond ((eq? request 'I-have-a-value)
          (process-new-value))
         ((eq? request 'I-lost-my-value)
          (process-forget-value))
         (else
          (error 'adder "Unknown request -- " request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me))
(define (multiplier m1 m2 product)
 (define (process-new-value)
  (cond ((or (and (has-value? m1) (= (get-value m1) 0))
             (and (has-value? m2) (= (get-value m2) 0)))
         (set-value! product 0 me))
        ((and (has-value? m1) (has-value? m2))
         (set-value! product
                     (* (get-value m1) (get-value m2))
                     me))
        ((and (has-value? product) (has-value? m1))
         (set-value! m2
                     (/ (get-value product) (get-value m1))
                     me))
        ((and (has-value? product) (has-value? m2))
         (set-value! m1
                     (/ (get-value product) (get-value m2))
                     me))))
 (define (process-forget-value)
  (forget-value! product me)
  (forget-value! m1 me)
  (forget-value! m2 me)
  (process-new-value))
 (define (me request)
  (cond ((eq? request 'I-have-a-value)
         (process-new-value))
        ((eq? request 'I-lost-my-value)
         (process-forget-value))
        (else
         (error 'multiplier "Unknown request -- " request))))
 (connect m1 me)
 (connect m2 me)
 (connect product me)
 me)
(define (constant value connector)
  (define (me request)
          (error 'constant "Unknown request --" request))
  (connect connector me)
  (set-value! connector value me)
  me)

(define (inform-about-value constraint)
 (constraint 'I-have-a-value))
(define (inform-about-no-value constraint)
 (constraint 'I-lost-my-value))
(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
           (process-new-value))
          ((eq? request 'I-lost-my-value)
           (process-forget-value))
          (else
            (error 'probe "Unknown request -- " request))))
  (connect connector me)
  me)
(define (for-each-except exception procedure ls)
  (define (loop items)
    ;(display (list "for-each-loop" items))(newline)
    (cond ((null? items) 'done)
          ((eq? (car items) exception) (loop (cdr items)))
          (else
           (procedure (car items))
           (loop (cdr items)))))
  ;(display (list "for-each-excpet" exception procedure ls))(newline)
  (loop ls))
(define (make-connector)
  (let ((value #f) (informant #f) (constraints '()))
    (define (set-my-value! newval setter)
      (cond ((not (has-value? me))
             ;(newline)(display (list "set-new-value: " newval))
             (set! value newval)
             (set! informant setter)
             (for-each-except setter
                              inform-about-value
                              constraints))
            ((not (= value newval))
             (error 'connector "contradiction" value newval))
            (else 'ignored)))
    (define (forget-my-value! retractor)
      (if (eq? retractor informant)
          (begin (set! informant #f)
                 (for-each-except retractor
                                  inform-about-no-value
                                  constraints))
          'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
          (set! constraints
                (cons new-constraint constraints)))
      (if (has-value? me)
          (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
             (if (eq? #f informant) #f #t))
            ((eq? request 'value) value)
            ((eq? request 'set-value!) set-my-value!)
            ((eq? request 'forget!)  forget-my-value!)
            ((eq? request 'connect) connect)
            (else
             (error 'connector "Unknown request -- " request))))
    me))

(define (has-value? connector) (connector 'has-value?))
(define (get-value connector) (connector 'value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector retractor)
  ((connector 'forget!) retractor))
(define (connect connector new-constraint)
  ;(display (list "connect:" connector new-constraint))(newline)
  ((connector 'connect) new-constraint))

(define a (make-connector))
(define b (make-connector))

(probe "a:" a)
(probe "b:" b)

; If we set b as value 9, the squarer doesn't resolve to 3 imediately.
; So this is a one-direction, not constraint based.
(define (squarer a b)
  (multiplier a a b)
  'ok)
(squarer a b)

(set-value! a 2 'user)
(forget-value! a 'user)
(set-value! b 9 'user)

