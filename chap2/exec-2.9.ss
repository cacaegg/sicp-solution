(define (make-interval a b) (cons a b))
(define (lower-bound i) (car i))
(define (upper-bound i) (cdr i))
(define (width i)
 (/ (- (upper-bound i) (lower-bound i)) 2.0))
(define (sub-interval a b)
 (make-interval (- (lower-bound a) (lower-bound b))
                (- (upper-bound a) (upper-bound b))))
(define (add-interval a b)
 (make-interval (+ (lower-bound a) (lower-bound b))
                (+ (upper-bound a) (upper-bound b))))
(define (mul-interval x y)
 (let ((p1 (* (lower-bound x) (lower-bound y)))
       (p2 (* (lower-bound x) (upper-bound y)))
       (p3 (* (upper-bound x) (lower-bound y)))
       (p4 (* (upper-bound x) (upper-bound y))))
  (make-interval (min p1 p2 p3 p4)
                 (max p1 p2 p3 p4))))
(define (div-interval x y)
 (mul-interval x
               (make-interval (/ 1.0 (upper-bound y))
                              (/ 1.0 (lower-bound y)))))


(let ((a (make-interval 2 5)) 
      (b (make-interval 3 9)))
 (newline)
 (display "width a: ")
 (display (width a))
 (newline)
 (display "width b: ")
 (display (width b))
 (newline)
 (display "width (a + b) : ")
 (display (width (add-interval a b)))
 (newline)
 (display "width (a * b) : ")
 (display (width (mul-interval a b)))
 (newline)
 (display "width (b / a) : ")
 (display (width (div-interval b a)))
 (newline))

