(define *op-table* (make-hashtable equal-hash equal?))
(define (put op type proc)
 (hashtable-set! *op-table* (list op type) proc))
(define (get op type)
 (hashtable-ref *op-table* (list op type) '()))
(define (attach-tag tag obj) 
 (cond ((number? obj) obj)
       (else (cons tag obj))))
(define (type-tag obj) 
 (cond ((number? obj) 'scheme-number)
       ((pair? obj) (car obj))
       (else
        (error 'type-tag "Bad tagged datum -- TYPE-TAG" obj))))
(define (content obj)
 (cond ((number? obj) obj)
       ((pair? obj) (cdr obj))
       (else
        (error 'content "Bad tagged datum -- CONTENT" obj))))
(define (apply-generic op . args)
 (let ((type-tags (map type-tag args)))
  (let ((proc (get op type-tags)))
   (if (not (null? proc))
       (apply proc (map content args))
       (error 'apply-generic "No method for these types -- APPLY-GENERIC"
              (list op type-tags))))))

(define (add x y) (apply-generic 'add x y))
(define (sub x y) (apply-generic 'sub x y))
(define (mul x y) (apply-generic 'mul x y))
(define (div x y) (apply-generic 'div x y))

(define (install-scheme-number-package)
 (define (tag x)
  (attach-tag 'scheme-number x))
 (put 'add '(scheme-number scheme-number)
  (lambda (x y) (tag (+ x y))))
 (put 'sub '(scheme-number scheme-number)
  (lambda (x y) (tag (- x y))))
 (put 'mul '(scheme-number scheme-number)
  (lambda (x y) (tag (* x y))))
 (put 'div '(scheme-number scheme-number)
  (lambda (x y) (tag (/ x y))))
 (put 'make 'scheme-number
  (lambda (x) (tag x)))
 'done)
(define (make-scheme-number n)
 ((get 'make 'scheme-number) n))

(install-scheme-number-package)
(let ((x (make-scheme-number 3))
      (y (make-scheme-number 4)))
 (add x y))
(let ((x (make-scheme-number 3))
      (y (make-scheme-number 4)))
 (sub x y))
(let ((x (make-scheme-number 3))
      (y (make-scheme-number 4)))
 (mul x y))
(let ((x (make-scheme-number 3))
      (y (make-scheme-number 4)))
 (div x y))
(let ((x (make-scheme-number 3))
      (y (make-scheme-number 4)))
 (+ x y))
