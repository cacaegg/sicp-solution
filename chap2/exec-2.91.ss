(define *op-table* (make-hashtable equal-hash equal?))
(define (put op type proc)
 (hashtable-set! *op-table* (list op type) proc))
(define (get op type)
 (hashtable-ref *op-table* (list op type) '()))
(define (attach-tag tag obj) 
 (cond ((number? obj) obj)
       (else (cons tag obj))))
(define (type-tag obj) 
 (cond ((number? obj) 'scheme-number)
       ((pair? obj) (car obj))
       (else
        (error 'type-tag "Bad tagged datum -- TYPE-TAG" obj))))
(define (content obj)
 (cond ((number? obj) obj)
       ((pair? obj) (cdr obj))
       (else
        (error 'content "Bad tagged datum -- CONTENT" obj))))
(define (apply-generic op . args)
 ;(display (list "ag:" op args))(newline)
 (let ((type-tags (map type-tag args)))
  (let ((proc (get op type-tags)))
   (if (not (null? proc))
       (apply proc (map content args))
       (error 'apply-generic "No method for these types -- APPLY-GENERIC"
              (list op type-tags))))))

(define (install-scheme-number-package)
 (define (tag x)
  (attach-tag 'scheme-number x))
 (put 'add '(scheme-number scheme-number)
  (lambda (x y) (tag (+ x y))))
 (put 'sub '(scheme-number scheme-number)
  (lambda (x y) (tag (- x y))))
 (put 'mul '(scheme-number scheme-number)
  (lambda (x y) (tag (* x y))))
 (put 'div '(scheme-number scheme-number)
  (lambda (x y) (tag (/ x y))))
 (put 'neg '(scheme-number)
  (lambda (x) (- 0 x)))
 (put 'equ? '(scheme-number scheme-number)
  (lambda (x y) (= x y)))
 (put '=zero? '(scheme-number)
  (lambda (x) (zero? x)))
 (put 'make 'scheme-number
  (lambda (x) (tag x)))
 'done)

;; The polynomial package
;; Fundamental of polynomial package, term package
(define (install-term)
 (define (make-term order coeff) (list order coeff))
 (define (order term) (car term))
 (define (coeff term) (cadr term))
 (define (negation-term term)
  (make-term (order term)
             (negation (coeff term))))
 (define (tag obj) (attach-tag 'term obj))
 (put 'make 'term 
  (lambda (ord coeff) 
   (tag (make-term ord coeff))))
 (put 'order '(term) order)
 (put 'coeff '(term) coeff)
 (put 'neg '(term)
  (lambda (t) 
   (tag (negation-term t))))
 'done)

;; Package of polynomial
(define (install-polynomial-package)
 ;; Import procedures from dense and sparse package
 (define (make-dense-list term-ls)
  ((get 'make 'dense) term-ls))
 (define (make-sparse-list term-ls)
  ((get 'make 'sparse) term-ls))
 (define (add-terms tm-ls-1 tm-ls-2)
  (apply-generic 'add tm-ls-1 tm-ls-2))
 (define (mul-terms tm-ls-1 tm-ls-2)
  (apply-generic 'mul tm-ls-1 tm-ls-2))
 (define (div-terms tm-ls-1 tm-ls-2)
  (apply-generic 'div tm-ls-1 tm-ls-2))
 (define (negation-terms term-ls)
  (apply-generic 'neg term-ls))
 
 ;; Representation of poly
 (define (make-poly variable term-list)
  (cons variable term-list))
 (define (variable poly) (car poly))
 (define (term-list poly) (cdr poly))
 (define (variable? x) (symbol? x))
 (define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

 ;; Polynomial arithmetic
 (define (negation-poly p1)
   (make-poly (variable p1)
              (negation-terms (term-list p1))))
 (define (add-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (add-terms (term-list p1)
                            (term-list p2)))
      (error 'add-poly "Poly not in same var -- ADD-POLY" (list p1 p2))))
 (define (mul-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (mul-terms (term-list p1)
                            (term-list p2)))
      (error 'mul-poly "Poly not in same var -- MUL-POLY" (list p1 p2))))
 (define (sub-poly p1 p2)
  ;(display (list "sub-poly:" p1 p2 "neg-p2:" (negation-poly p2)))(newline)
  (add-poly p1 (negation-poly p2)))
 (define (div-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (make-poly (variable p1)
                 (div-terms (term-list p1) (term-list p2)))
      (error 'div-poly "Poly not in same var -- DIV-POLY" (list p1 p2))))

 ; Interface 
 (define (tag p) (attach-tag 'polynomial p))
 (put 'add '(polynomial polynomial)
  (lambda (p1 p2) (tag (add-poly p1 p2))))
 (put 'mul '(polynomial polynomial)
  (lambda (p1 p2) (tag (mul-poly p1 p2))))
 (put 'sub '(polynomial polynomial) 
  (lambda (p1 p2) (tag (sub-poly p1 p2))))
 (put 'div '(polynomial polynomial)
  (lambda (p1 p2) (tag (div-poly p1 p2))))
 (put 'neg '(polynomial)
  (lambda (p1) (tag (negation-poly p1))))
 (put 'make-dense 'polynomial
  (lambda (var tm-ls) 
   (tag (make-poly var (make-dense-list tm-ls)))))
 (put 'make-sparse 'polynomial
  (lambda (var tm-ls) 
   (tag (make-poly var (make-sparse-list tm-ls)))))
 'done)



;; Subpackage of polynomial, representaiont of dense termlist
(define (install-dense-termlist)
 ;; Representation and manipuation of term
 (define (make-term ord coeff) (list ord coeff))
 (define (order t) (car t))
 (define (coeff t) (cadr t))
 (define (negation-term t) 
  (make-term (order t) (- 0 (coeff t))))

 ;; Representation of dense termlist
 (define (make-dense-termlist term-ls)
  (define (max-order ls cur-order)
   ;(display (list "max-order:" ls cur-order))(newline)
   (cond ((empty-termlist? ls) cur-order)
         ((> (order (car ls)) cur-order)
          (max-order (cdr ls)
                     (order (car ls))))
         (else
          (max-order (cdr ls)
                     cur-order))))
  (define (make-list-from from remain-terms)
   ;(display (list "make-list-from:" from remain-terms))(newline)
   (cond ((= from 0)
          (if (null? remain-terms)
              (list 0)
              (cons (coeff (car remain-terms))
                    (make-list-from from (cdr remain-terms)))))
         ((empty-termlist? remain-terms)
          (cons 0 (make-list-from (1- from) remain-terms)))
         ((and (> from 0) (= from (order (car remain-terms))))
          (cons (coeff (car remain-terms))
                (make-list-from (1- from) (cdr remain-terms))))
         (else
          (cons 0
                (make-list-from (1- from) remain-terms)))))
  ;(display (list "make-dense-termlist:" term-ls))(newline)
  (make-list-from (max-order term-ls 0) term-ls))
 (define (the-empty-termlist) '())
 (define (first-term term-list) 
  (make-term (1- (length term-list)) (car term-list)))
 (define (rest-terms term-list) (cdr term-list))
 (define (empty-termlist? term-list) (null? term-list))

 ;; Manipulate termlist
 (define (adjoin-term term tm-list)
  (define (zeros n) (if (> n 0) (cons 0 (zeros (1- n))) '()))
  ;(display (list "adjoin-term:" term tm-list (order term) (length tm-list)))(newline)
  (cond ((=zero? (coeff term))
         tm-list)
        ((empty-termlist? tm-list)
         (make-dense-termlist (list term)))
        ((= (order term) (1- (length tm-list)))
         (append 
          (list (add (coeff term) (coeff (first-term tm-list))))
          (rest-terms tm-list)))
        ((>= (order term)  (length tm-list))
         (let ((delta (- (order term) (length tm-list))))
          (append (list (coeff term))
                  (zeros delta)
                  tm-list)))
        (else
         (adjoin-term term (cons 0 tm-list)))))
 (define (negation-terms tm-ls)
  (if (empty-termlist? tm-ls)
      (the-empty-termlist)
      (adjoin-term
       (negation-term (first-term tm-ls))
       (negation-terms (rest-terms tm-ls)))))
 (define (add-terms L1 L2)
  ;(display (list "add-terms (dense):" L1 L2))(newline)
  (cond ((empty-termlist? L1) L2)
        ((empty-termlist? L2) L1)
        (else
         (let ((t1 (first-term L1)) (t2 (first-term L2)))
          (cond ((> (order t1) (order t2))
                 (adjoin-term
                  t1 (add-terms (rest-terms L1) L2)))
                ((< (order t1) (order t2))
                 (adjoin-term
                  t2 (add-terms L1 (rest-terms L2))))
                (else
                 (adjoin-term
                  (make-term (order t1)
                             (add (coeff t1) (coeff t2)))
                  (add-terms (rest-terms L1)
                             (rest-terms L2)))))))))
 (define (mul-terms L1 L2)
  (if (empty-termlist? L1)
      (the-empty-termlist)
      (add-terms (mul-term-by-all-terms (first-term L1) L2)
                 (mul-terms (rest-terms L1) L2))))
 (define (mul-term-by-all-terms t1 L)
  (if (empty-termlist? L)
      (the-empty-termlist)
      (let ((t2 (first-term L)))
       (adjoin-term
        (make-term (+ (order t1) (order t2))
                   (mul (coeff t1) (coeff t2)))
        (mul-term-by-all-terms t1 (rest-terms L))))))

 (define (tag obj) (attach-tag 'dense obj))
 (put 'make 'dense
  (lambda (t) (tag (make-dense-termlist t))))
 (put 'adjoin-term '(term dense)
  (lambda (t dense-list) (tag (adjoin-term t dense-list))))
 (put 'neg '(dense)
  (lambda (tm-list) (tag (negation-terms tm-list))))
 (put 'add '(dense dense)
  (lambda (tm-ls-1 tm-ls-2) 
   (tag (add-terms tm-ls-1 tm-ls-2))))
 (put 'mul '(dense dense)
  (lambda (tm-ls-1 tm-ls-2)
   (tag (mul-terms tm-ls-1 tm-ls-2))))
 'done)

(define (install-sparse-termlist)
 ;; Representation of term
 (define (make-term ord coeff) (list ord coeff))
 (define (order t) (car t))
 (define (coeff t) (cadr t))
 (define (negation-term t) 
  (make-term (order t) (- 0 (coeff t))))

 ;; Representation of termlist
 (define (make-sparse-termlist term-list) term-list)
 (define (the-empty-termlist) '())
 (define (empty-termlist? term-list) 
  ;(display (list "empty-termlist?:" term-list))(newline)
  (null? term-list))

 ;; Manipulation about termlist
 (define (adjoin-term term tm-list)
  (if (=zero? (coeff term))
      tm-list
      (cons term tm-list)))
 (define (first-term term-list) 
  (car term-list))
 (define (rest-terms term-list) (cdr term-list))
 (define (negation-terms tm-ls)
  (if (empty-termlist? tm-ls)
      (the-empty-termlist)
      (adjoin-term
       (negation-term (first-term tm-ls))
       (negation-terms (rest-terms tm-ls)))))
 (define (add-terms L1 L2)
  (cond ((empty-termlist? L1) L2)
        ((empty-termlist? L2) L1)
        (else
         (let ((t1 (first-term L1)) (t2 (first-term L2)))
          (cond ((> (order t1) (order t2))
                 (adjoin-term
                  t1 (add-terms (rest-terms L1) L2)))
                ((< (order t1) (order t2))
                 (adjoin-term
                  t2 (add-terms L1 (rest-terms L2))))
                (else
                 (adjoin-term
                  (make-term (order t1)
                             (add (coeff t1) (coeff t2)))
                  (add-terms (rest-terms L1)
                             (rest-terms L2)))))))))
 (define (mul-terms L1 L2)
  ;(display (list "mul-terms:" L1 L2))(newline)
  (if (empty-termlist? L1)
      (the-empty-termlist)
      (add-terms (mul-term-by-all-terms (first-term L1) L2)
                 (mul-terms (rest-terms L1) L2))))
 (define (mul-term-by-all-terms t1 L)
  (if (empty-termlist? L)
      (the-empty-termlist)
      (let ((t2 (first-term L)))
       (adjoin-term
        (make-term (+ (order t1) (order t2))
                   (mul (coeff t1) (coeff t2)))
        (mul-term-by-all-terms t1 (rest-terms L))))))
 (define (div-terms L1 L2)
  ;(display (list "div-terms:" L1 L2))(newline)
  (if (empty-termlist? L1)
      (list (the-empty-termlist) (the-empty-termlist))
      (let ((t1 (first-term L1))
            (t2 (first-term L2)))
       ;(display (list "div-terms:" "t1:" t1 "t2:" t2))(newline)
       (if (> (order t2) (order t1))
           (list (the-empty-termlist) L1)
           (let ((new-c (div (coeff t1) (coeff t2)))
                 (new-o (- (order t1) (order t2))))
            ;(display (list "div-terms:" "new-c:" new-c "new-o:" new-o))(newline)
            (let ((rest-of-result
                   (div-terms (add-terms L1
                               (negation-terms 
                                (mul-terms (list (make-term new-o new-c)) L2)))
                    L2)))
                 ;(display (list "result:" (make-term new-o new-c) rest-of-result))(newline)
                 (list (cond ((empty-termlist? rest-of-result)
                              (make-term new-o new-c))
                             ((null? (first-term rest-of-result))
                              (make-term new-o new-c))
                             (else
                              (cons (make-term new-o new-c) 
                               rest-of-result)))
                       (cadr rest-of-result))))))))

 (define (tag obj) (attach-tag 'sparse obj))
 (put 'make 'sparse
  (lambda (t) (tag (make-sparse-termlist t))))
 (put 'add '(sparse sparse)
  (lambda (tm-ls-1 tm-ls-2)
   (tag (add-terms tm-ls-1 tm-ls-2))))
 (put 'mul '(sparse sparse)
  (lambda (tm-ls-1 tm-ls-2)
   (tag (mul-terms tm-ls-1 tm-ls-2))))
 (put 'neg '(sparse)
  (lambda (tm-list) (tag (negation-terms tm-list))))
 (put 'div '(sparse sparse)
  (lambda (tm-ls-1 tm-ls-2) (tag (div-terms tm-ls-1 tm-ls-2))))
 'done)

; Predicates
(define (=zero? number) (apply-generic '=zero? number))

(install-scheme-number-package)
(install-dense-termlist)
(install-sparse-termlist)
(install-polynomial-package)

(define (make-dense-polynomial var tm-list)
 ((get 'make-dense 'polynomial) var tm-list))
(define (make-sparse-polynomial var tm-list)
 ((get 'make-sparse 'polynomial) var tm-list))
(define (add p1 p2)
 (apply-generic 'add p1 p2))
(define (sub p1 p2)
 (apply-generic 'sub p1 p2))
(define (mul p1 p2)
 (apply-generic 'mul p1 p2))
(define (div p1 p2)
 (apply-generic 'div p1 p2))
(define (negation p1)
 (apply-generic 'neg p1))

(let ((p1 (make-dense-polynomial 'x '((5 2) (3 8) (1 9))))
      (p2 (make-dense-polynomial 'x '((4 3) (2 6)))))
 (display (list "dense-polynomial" p1 p2))
 (newline))
(let ((p1 (make-dense-polynomial 'x '((5 2) (3 8) (1 9))))
      (p2 (make-dense-polynomial 'x '((4 3) (2 6)))))
 (display (list "add-dense-polynomial" (add p1 p2)))
 (newline))
(let ((p1 (make-dense-polynomial 'x '((5 2) (3 8) (1 9))))
      (p2 (make-dense-polynomial 'x '((4 3) (2 6)))))
 (display (list "sub-dense-polynomial" (sub p1 p2)))
 (newline))
(let ((p1 (make-dense-polynomial 'x '((5 2) (3 8) (1 9))))
      (p2 (make-dense-polynomial 'x '((4 3) (2 6)))))
 (display (list "mul-dense-polynomial" (mul p1 p2)))
 (newline))

(let ((p1 (make-sparse-polynomial 'x '((5 2) (3 8) (1 9))))
      (p2 (make-sparse-polynomial 'x '((4 3) (2 6)))))
 (display (list "sparse-polynomial" p1 p2))
 (newline))
(let ((p1 (make-sparse-polynomial 'x '((5 2) (3 8) (1 9))))
      (p2 (make-sparse-polynomial 'x '((5 3) (2 6)))))
 (display (list "add-sparse-polynomial" (add p1 p2)))
 (newline))
(let ((p1 (make-sparse-polynomial 'x '((5 2) (3 8) (1 9))))
      (p2 (make-sparse-polynomial 'x '((5 3) (2 6)))))
 (display (list "sub-sparse-polynomial" (sub p1 p2)))
 (newline))
(let ((p1 (make-sparse-polynomial 'x '((5 2) (3 8) (1 9))))
      (p2 (make-sparse-polynomial 'x '((5 3) (2 6)))))
 (display (list "mul-sparse-polynomial" (mul p1 p2)))
 (newline))
(let ((p1 (make-sparse-polynomial 'x '((5 2) (3 8) (1 9))))
      (p2 (make-sparse-polynomial 'x '((5 3) (2 6)))))
 (display (list "div-sparse-polynomial" (div (mul p1 p2) p2)))
 (newline))
