(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
 (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
 (and (number? exp) (= exp num)))

(define (make-sum a1 . a2)
 (cond ((=number? a1 0) a2)
       ((=number? a2 0) a1)
       ((and (number? a1) (number? a2)) (+ a1 a2))
       (else (append (list '+ a1) a2))))
(define (make-product m1 . m2)
 (cond ((or (=number? m1 0) (=number? m2 0)) 0)
       ((=number? m1 1) m2)
       ((=number? m2 1) m1)
       ((and (number? m1) (number? m2)) (* m1 m2))
       (else (append (list '* m1) m2))))
(define (make-exponentiation b e)
 (cond ((=number? e 0) 1)
       ((=number? e 1) b)
       ((and (number? b) (number? e)) (expt b e))
       (else (list '** b e))))

(define (sum? x)
 (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) 
 (if (null? (cdddr s))
     (caddr s)
     (cons '+ (cddr s))))

(define (product? x)
 (and (pair? x) (eq? (car x) '*)))
(define (multiplier p)
 (cadr p))
(define (multiplicand p)
 (if (null? (cdddr p))
     (caddr p)
     (cons '* (cddr p))))

(define (exponentiation? e)
 (and (pair? e) (eq? (car e) '**)))
(define (base e) (cadr e))
(define (exponent e) (caddr e))

(define (deriv exp var)
 (cond ((number? exp) 0)
       ((variable? exp)
        (if (same-variable? exp var) 1 0))
       ((sum? exp)
        (make-sum (deriv (addend exp) var)
                  (deriv (augend exp) var)))
       ((product? exp)
        (make-sum 
         (make-product (multiplier exp)
                       (deriv (multiplicand exp) var))
         (make-product (deriv (multiplier exp) var)
                       (multiplicand exp))))
       ((exponentiation? exp)
        (let ((e (exponent exp))
              (b (base exp)))
         (make-product 
          (make-product e (make-exponentiation b (1- e))) 
          (deriv b var))))
       (else
        (error "Unknown expression type -- DERIV" exp))))
(trace deriv)

; (deriv '(* x y (+ (* x x) 3 4)) 'x)
(deriv '(* (* x y) (+ x 3)) 'x) 
