(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
 (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
 (and (number? exp) (= exp num)))

(define (make-sum a1 a2)
 (cond ((=number? a1 0) a2)
       ((=number? a2 0) a1)
       ((and (number? a1) (number? a2)) (+ a1 a2))
       ((or (number? a2) (variable? a2)) (list a1 '+ a2))
       (else (append (list a1 '+) a2))))
(define (make-product m1 m2)
 (cond ((or (=number? m1 0) (=number? m2 0)) 0)
       ((=number? m1 1) m2)
       ((=number? m2 1) m1)
       ((and (number? m1) (number? m2)) (* m1 m2))
       ((or (number? m2) (variable? m2)) (list m1 '* m2))
       (else (append (list m1 '*) (list m2)))))
(define (make-exponentiation b e)
 (cond ((=number? e 0) 1)
       ((=number? e 1) b)
       ((and (number? b) (number? e)) (expt b e))
       (else (list b '** e))))

(make-sum 'x 1)
(make-sum 'x (make-product 2 'y))
(make-sum 'x (make-product 'y 2))

(define (sum? x)
 (and (pair? x) (eq? (cadr x) '+)))
(define (addend s) (car s))
(define (augend s) (caddr s))
(let ((s (make-sum 'x (make-product 'y 2))))
 (display (sum? s)) (newline)
 (display (addend s)) (newline)
 (display (augend s)) (newline))

(define (product? x)
 (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p)
 (car p))
(define (multiplicand p)
 (caddr p))

(let ((s (make-product 'x (make-product 'y 2))))
 (display (product? s)) (newline)
 (display (multiplier s)) (newline)
 (display (multiplicand s)) (newline))

(define (exponentiation? e)
 (and (pair? e) (eq? (cadr e) '**)))
(define (base e) (car e))
(define (exponent e) (caddr e))

(define (deriv exp var)
 (cond ((number? exp) 0)
       ((variable? exp)
        (if (same-variable? exp var) 1 0))
       ((sum? exp)
        (make-sum (deriv (addend exp) var)
                  (deriv (augend exp) var)))
       ((product? exp)
        (make-sum 
         (make-product (multiplier exp)
                       (deriv (multiplicand exp) var))
         (make-product (deriv (multiplier exp) var)
                       (multiplicand exp))))
       ((exponentiation? exp)
        (let ((e (exponent exp))
              (b (base exp)))
         (make-product 
          (make-product e (make-exponentiation b (1- e))) 
          (deriv b var))))
       (else
        (error "Unknown expression type -- DERIV" exp))))

(make-sum 'x 
 (make-product 3
  (make-sum 'x
   (make-sum 'y 2))))

(deriv '(x + 3) 'x)
(deriv '(x * y) 'x)
(deriv '((x * y) * (x + 3)) 'x)
